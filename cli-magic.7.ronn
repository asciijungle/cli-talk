cli-magic(1) -- an introduction to command line interfaces
==========================================================

## SYNOPSIS

wget -O - -o /dev/null https://raw.githubusercontent.com/asciijungle/cli-talk/master/cli-magic.7 | man /dev/stdin

## DESCRIPTION

This is an introduction to the command line interface (CLI) of modern unix
operating systems. It provides an overview about the terminology, as well as
the history of CLIs and shows how to use the command line for productive day to
day work. 

## HISTORY

In the middle of the last century, early computers had rather primitive
input/output interfaces. Both the program code and the input data were read
from punch cards. The output of the computation would then be printed onto
paper by printers attached to the computer.

This was a batch process workflow rather than in interactive user session. In
order to facilitate a proper utilization of those very expensive early
machines, jobs piled up and programmers had to wait for a long time before
getting the results of their programms compilation and then its execution.

### Teletypewriter

In 1956 scientists at MIT were experimenting with attaching a teletypewriter to
a computer to unify input and output. Even before the invention of the computer
teletypewriters have been used for communication replacing the morse code based
telegraphy.

### Visual Display Units (glass TTY)

### Terminal Emulators

different escape sequences

### Control Codes


*Ctrl-C*

You can use Ctrl-C in your terminal to abort a running program. This sends a
SIGINT signal to the process currently executed by the shell. Most programs
interpret it similar to SIGTERM wich calls for graceful termination.

*Ctrl-D*

Ctrl-D sends an end of line (EOL) character to the shell. The shell interprets
end of line as the end of user input. It therefore has the same result as
typing exit in the shell.

*Ctrl-U*

Ctrl-U cancels the currently inputted command line.

*Ctrl-K*

Ctrl-K cancels user input from the location of the cursor to the end of the line.

*Ctrl-Z*

Pause the currently executed program and return to the shell. You can resume
stopped processes with `fg` or `bg`.

*Ctrl-R*

triggers reverse search through the command line history.

*Ctrl-L*

Clears the current content of the terminal starting with a clean prompt.

## SHELL

The Shell is the program directly connected to a terminal. It provides an
interactive programming language allowing you to invoke different programs as
well as combining them to accomplish a certain outcome. The difference between
the shell and other interpreted programming languages like e.g. python is that
in python most of the code is written to be run in the interpreter itself,
whereas the shell is primarily starting other programs to do the work.

### Prompt

The prompt is shown to indicate that the shell is ready for receiving input. It can be customized via the $PS1 variable. In your shell configuration you can do fancy stuff like calling programms and adding their output to the prompt.

### current working directory

There is always a current working directory from which relative paths will be interpreted. You can show the current working directory with the `pwd` command.

### Variables and Environment Variables

*PATH*

The path variable defines directories where the shell looks for executables that are directly known to the shell.

### piping

You can combine various commands with the `|` pipe operator. The output of the first command (Stdout) will be fed into the input (Stdin) of the second command.
For example: ls | less

## process substitution

Process substitution allows a process's input or output to be referred to using a filename.  It takes the form of <(list) or >(list).  The process list is run asynchronously, and its input or  output  appears  as  a  filename. This is a bit like piping into files.

### brace expension

~/dev/customer1/{repo1, repo2}

/home/bbr/dev/customer1/repo1 /home/bbr/dev/customer1/repo2

### History

The Shell writes all executed commands into a history file which is shell specific. For bash it is ~/.bash_history. You can browse the history via the `history` command. You can also browse the last commands via arrow up, arow down. Remember: you can also search the history in reverse via CTRL-R.

### Tab completion

The shell has a lot of convenience functions. One of them is the tab completion feature. At almost any time you can complete using tab. This depends on the program and the shell implementation. You should look into ZSH if you want advanced tab completion.

## Aliases

You can define command aliases in your shell's config file to define shortcuts. For bash thats ~/.bashrc

## PROGRAMMS

Unix comes with a lot of utility programs that you can combine to write shell scripts.

### man

Shows the manual of a given program. This talk is a man page too ;)

### grep

grep searches stdin for a given string. grep -r can search recursively in all files in a directory.

### less

a pager that allows you to scroll an input in both ways. It also provides a search functionality.

### sed

sed is the "stream editor" it allows for advanced manipulation of the input stream.

### awk

pattern scanning and processing language. You can do advanced stuff with table shaped data.

### uniq

remove or count redundant lines in a sorted input stream.

### sort

sorts a stream in various ways.

## Terminal multiplexing

### tmux

### screen

## AUTHOR

Benjamin Brunzel <benjamin.brunzel@iteratec.de>
Harald Berner <harald.berner@iteratec.de>

## SEE ALSO

* In depth video lecture to the Unix command line: https://www.youtube.com/watch?v=07Q9oqNLXB4
* Video showing the compilation workflow of a `Fortran` programm on an IBM 1401: https://www.youtube.com/watch?v=uFQ3sajIdaM
* Time sharing concept and hard copy terminals (1963) https://www.youtube.com/watch?v=Q07PhW5sCEk
* see introduction to the Unix operating system (1982) https://www.youtube.com/watch?v=tc4ROCJYbm0
* List of terminal control codes available in `bash`: http://wiki.bash-hackers.org/scripting/terminalcodes

